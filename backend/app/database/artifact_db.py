"""
Artifact database operations.

Handles CRUD operations for artifacts (generated files: MD, HWPX, PDF).
"""
from typing import Optional, List, Tuple
from datetime import datetime
from .connection import get_db_connection
from app.models.artifact import Artifact, ArtifactCreate
from shared.types.enums import ArtifactKind


class ArtifactDB:
    """Artifact database class for CRUD operations."""

    @staticmethod
    def create_artifact(
        topic_id: int,
        message_id: int,
        artifact_data: ArtifactCreate
    ) -> Artifact:
        """Creates a new artifact.

        Args:
            topic_id: Parent topic ID
            message_id: Source message ID
            artifact_data: Artifact creation data

        Returns:
            Created artifact entity

        Examples:
            >>> artifact_data = ArtifactCreate(
            ...     kind=ArtifactKind.MD,
            ...     filename="report.md",
            ...     file_path="artifacts/topics/1/messages/report.md",
            ...     file_size=1024
            ... )
            >>> artifact = ArtifactDB.create_artifact(1, 2, artifact_data)
            >>> print(artifact.filename)
            report.md
        """
        conn = get_db_connection()
        cursor = conn.cursor()

        now = datetime.now()
        cursor.execute(
            """
            INSERT INTO artifacts (
                topic_id, message_id, kind, locale, version,
                filename, file_path, file_size, sha256, created_at
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                topic_id,
                message_id,
                artifact_data.kind.value,
                artifact_data.locale,
                artifact_data.version,
                artifact_data.filename,
                artifact_data.file_path,
                artifact_data.file_size,
                artifact_data.sha256,
                now
            )
        )

        conn.commit()
        artifact_id = cursor.lastrowid

        # Retrieve created artifact
        cursor.execute("SELECT * FROM artifacts WHERE id = ?", (artifact_id,))
        row = cursor.fetchone()
        conn.close()

        return ArtifactDB._row_to_artifact(row)

    @staticmethod
    def get_artifact_by_id(artifact_id: int) -> Optional[Artifact]:
        """Retrieves artifact by ID.

        Args:
            artifact_id: Artifact ID

        Returns:
            Artifact entity or None if not found
        """
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM artifacts WHERE id = ?", (artifact_id,))
        row = cursor.fetchone()
        conn.close()

        return ArtifactDB._row_to_artifact(row) if row else None

    @staticmethod
    def get_artifacts_by_topic(
        topic_id: int,
        kind: Optional[ArtifactKind] = None,
        locale: Optional[str] = None,
        limit: int = 50,
        offset: int = 0
    ) -> Tuple[List[Artifact], int]:
        """Retrieves artifacts for a topic with optional filters.

        Args:
            topic_id: Topic ID
            kind: Filter by artifact kind (optional)
            locale: Filter by locale (optional)
            limit: Maximum number of artifacts to return
            offset: Number of artifacts to skip

        Returns:
            Tuple of (list of artifacts, total count)

        Examples:
            >>> artifacts, total = ArtifactDB.get_artifacts_by_topic(1, kind=ArtifactKind.MD)
            >>> print(f"Found {total} MD files")
            Found 3 MD files
        """
        conn = get_db_connection()
        cursor = conn.cursor()

        # Build query with optional filters
        query = "SELECT * FROM artifacts WHERE topic_id = ?"
        count_query = "SELECT COUNT(*) FROM artifacts WHERE topic_id = ?"
        params = [topic_id]

        if kind:
            query += " AND kind = ?"
            count_query += " AND kind = ?"
            params.append(kind.value)

        if locale:
            query += " AND locale = ?"
            count_query += " AND locale = ?"
            params.append(locale)

        # Get total count
        cursor.execute(count_query, params)
        total = cursor.fetchone()[0]

        # Get artifacts ordered by created_at DESC
        query += " ORDER BY created_at DESC LIMIT ? OFFSET ?"
        params.extend([limit, offset])

        cursor.execute(query, params)
        rows = cursor.fetchall()
        conn.close()

        artifacts = [ArtifactDB._row_to_artifact(row) for row in rows]
        return artifacts, total

    @staticmethod
    def get_artifacts_by_message(message_id: int) -> List[Artifact]:
        """Retrieves all artifacts generated by a specific message.

        Args:
            message_id: Message ID

        Returns:
            List of artifacts
        """
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            "SELECT * FROM artifacts WHERE message_id = ? ORDER BY created_at DESC",
            (message_id,)
        )
        rows = cursor.fetchall()
        conn.close()

        return [ArtifactDB._row_to_artifact(row) for row in rows]

    @staticmethod
    def get_latest_artifact_by_kind(
        topic_id: int,
        kind: ArtifactKind,
        locale: str = "ko"
    ) -> Optional[Artifact]:
        """Retrieves the latest artifact of a specific kind and locale.

        Args:
            topic_id: Topic ID
            kind: Artifact kind
            locale: Locale code

        Returns:
            Latest artifact or None if not found

        Examples:
            >>> latest_md = ArtifactDB.get_latest_artifact_by_kind(1, ArtifactKind.MD, "ko")
            >>> if latest_md:
            ...     print(f"Latest version: {latest_md.version}")
            Latest version: 3
        """
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT * FROM artifacts
            WHERE topic_id = ? AND kind = ? AND locale = ?
            ORDER BY version DESC, created_at DESC
            LIMIT 1
            """,
            (topic_id, kind.value, locale)
        )
        row = cursor.fetchone()
        conn.close()

        return ArtifactDB._row_to_artifact(row) if row else None

    @staticmethod
    def delete_artifact(artifact_id: int) -> bool:
        """Deletes an artifact (hard delete, cascades to transformations).

        Args:
            artifact_id: Artifact ID

        Returns:
            True if deleted, False if not found
        """
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("DELETE FROM artifacts WHERE id = ?", (artifact_id,))
        conn.commit()

        deleted = cursor.rowcount > 0
        conn.close()

        return deleted

    @staticmethod
    def _row_to_artifact(row) -> Artifact:
        """Converts database row to Artifact model.

        Args:
            row: SQLite row object

        Returns:
            Artifact entity
        """
        return Artifact(
            id=row["id"],
            topic_id=row["topic_id"],
            message_id=row["message_id"],
            kind=ArtifactKind(row["kind"]),
            locale=row["locale"],
            version=row["version"],
            filename=row["filename"],
            file_path=row["file_path"],
            file_size=row["file_size"],
            sha256=row["sha256"],
            created_at=datetime.fromisoformat(row["created_at"])
        )
